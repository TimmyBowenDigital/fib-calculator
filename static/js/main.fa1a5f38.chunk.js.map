{"version":3,"sources":["service/CalculateFibAt.js","components/InputForm.jsx","App.js","serviceWorker.js","index.js"],"names":["calculateFibAt","inputValue","cache","isNaN","InputForm","props","state","calculatedFibValue","calculatedValueShown","inputValueErrorMessage","showInputValueError","handleChange","bind","showCalculatedValue","event","target","value","this","setState","preventDefault","type","ref","maxLength","onChange","placeholder","className","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAYeA,EAXQ,SAAjBA,EAAkBC,GAA4B,IAAhBC,EAAe,uDAAP,GACxC,OAAIA,EAAMD,GACCC,EAAMD,GAEbE,MAAMF,IAAeA,EAAa,EAC3B,EACPA,GAAc,EACP,EACJC,EAAMD,GAAcD,EAAeC,EAAa,EAAGC,GAASF,EAAeC,EAAa,EAAGC,ICmDvFE,E,kDAxDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTL,WAAY,GACZM,mBAAoB,GACpBC,sBAAsB,EACtBC,uBAAwB,GACxBC,qBAAqB,GAGzB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAC3B,EAAKF,oBAAsB,EAAKA,oBAAoBE,KAAzB,gBAZZ,E,yDAeNE,GACT,GAAGA,EAAMC,OAAOC,MAAQ,MAAQF,EAAMC,OAAOC,MAAQ,EAAG,CAEpDC,KAAKC,SAAS,CACVT,uBAF2B,oHAG3BR,WAAYa,EAAMC,OAAOC,aAG7BC,KAAKC,SAAS,CACVjB,WAAYa,EAAMC,OAAOC,MACzBT,mBAAoBP,EAAec,EAAMC,OAAOC,SAGxDF,EAAMK,mB,4CAIN,MAAiC,KAA1BF,KAAKX,MAAML,aAAsBgB,KAAKP,wB,4CAI7C,OAAOO,KAAKX,MAAML,WAAa,MAAQgB,KAAKX,MAAML,WAAa,I,+BAI/D,OACI,4BACI,2BAAK,yBAAOmB,KAAM,SAAUC,IAAK,aAAcC,UAAW,EAAGN,MAAOC,KAAKX,MAAML,WAAYsB,SAAUN,KAAKN,aAAca,YAAa,sBACrI,2BACKP,KAAKJ,uBACF,4DAAoCI,KAAKX,MAAMC,oBAElDU,KAAKP,uBACF,yBAAOe,UAAW,gBAAlB,gBAAgDR,KAAKX,MAAMG,8B,GAjD3DiB,aCeTC,MAdf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cACd,yBAAKA,UAAW,YACZ,oDACA,mIACA,kBAAC,EAAD,UCCMG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fa1a5f38.chunk.js","sourcesContent":["\r\nconst calculateFibAt = (inputValue, cache = {}) => {\r\n    if (cache[inputValue]) {\r\n        return cache[inputValue]\r\n    }\r\n    if (isNaN(inputValue) || inputValue < 1)\r\n        return 0;\r\n    if (inputValue <= 2)\r\n        return 1;\r\n    return cache[inputValue] = calculateFibAt(inputValue - 1, cache) + calculateFibAt(inputValue - 2, cache);\r\n};\r\n\r\nexport default calculateFibAt;","import * as React from \"react\";\r\nimport calculateFibAt from \"../service/CalculateFibAt\";\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: '',\r\n            calculatedFibValue: '',\r\n            calculatedValueShown: false,\r\n            inputValueErrorMessage: '',\r\n            showInputValueError: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.showCalculatedValue = this.showCalculatedValue.bind(this);\r\n        this.showInputValueError = this.showInputValueError.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        if(event.target.value > 2222 || event.target.value < 0) {\r\n            const inputValueErrorMessage = \"The value you entered was above the theoretical limit, please enter a value between 0 and 2222 to receive a value\";\r\n            this.setState({\r\n                inputValueErrorMessage: inputValueErrorMessage,\r\n                inputValue: event.target.value,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                inputValue: event.target.value,\r\n                calculatedFibValue: calculateFibAt(event.target.value)\r\n            });\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    showCalculatedValue() {\r\n        return this.state.inputValue !== '' && !this.showInputValueError();\r\n    }\r\n\r\n    showInputValueError() {\r\n        return this.state.inputValue > 2222 || this.state.inputValue < 0;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div><input type={\"number\"} ref={\"inputValue\"} maxLength={4} value={this.state.inputValue} onChange={this.handleChange} placeholder={\"Enter value here\"}  /></div>\r\n                <div>\r\n                    {this.showCalculatedValue() &&\r\n                        <label>Calculated Fibonacci value: {this.state.calculatedFibValue}</label>\r\n                    }\r\n                    {this.showInputValueError() &&\r\n                        <label className={\"ErrorMessage\"}>Input Error: {this.state.inputValueErrorMessage}</label>\r\n                    }\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputForm;","import React from 'react';\r\nimport './App.css';\r\nimport InputForm from \"./components/InputForm\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className={\"App-Form\"}>\r\n              <h1>Fibonacci Calculator</h1>\r\n              <p>Enter an integer into the form below to calculate the corresponding value in the fibonacci sequence.</p>\r\n              <InputForm />\r\n          </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}